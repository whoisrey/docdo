const app = require("../app");
const debug = require("debug")("backend:server");
const http = require("http");
const socketIo = require("socket.io");

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
};

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

const server = http.createServer(app);

const onError = (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
};

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
};

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

const io = socketIo(server);

io.on("connection", (socket) => {
  console.log("New client connected");

  socket.on("joinDocument", (documentId) => {
    socket.join(documentId);
  });

  socket.on("leaveDocument", (documentId) => {
    socket.leave(documentId);
  });

  socket.on("documentEdit", (data) => {
    const { documentId, content, cursorPosition } = data;
    socket
      .to(documentId)
      .broadcast.emit("documentEdit", { content, cursorPosition });
  });

  socket.on("disconnect", () => {
    console.log("Client disconnected");
  });
});
