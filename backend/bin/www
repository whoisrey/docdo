const app = require("../app");
const debug = require("debug")("backend:server");
const http = require("http");
const socketIo = require("socket.io");

const normalizePort = (value) => {
  const port = parseInt(value, 10);

  if (isNaN(port)) {
    return value;
  }

  if (port >= 0) {
    return port;
  }

  return false;
};

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

const server = http.createServer(app);

const onError = (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;

    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;

    default:
      throw error;
  }
};

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
};

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

const io = socketIo(server, {
  cors: {
    origin:
      process.env.NODE_ENV === "development"
        ? process.env.DEV_FIREBASE_PROJECT_URL
        : process.env.PROD_FIREBASE_PROJECT_URL,
    methods: ["GET", "POST"],
    credentials: true,
  },
});

const documentRooms = {};

io.on("connection", (socket) => {
  socket.on("joinDocument", (documentId) => {
    const room = documentRooms[documentId] || { users: [], cursors: {} };

    if (room.users.length >= 2) {
      socket.emit("error", "Room is full");
      return;
    }

    room.users.push(socket.id);
    documentRooms[documentId] = room;
    socket.join(documentId);

    io.to(documentId).emit("userJoined", room.users.length);
  });

  socket.on("leaveDocument", (documentId) => {
    const room = documentRooms[documentId];

    if (room) {
      room.users = room.users.filter((user) => user !== socket.id);

      delete room.cursors[socket.id];

      if (room.users.length === 0) {
        delete documentRooms[documentId];
      } else {
        documentRooms[documentId] = room;
        io.to(documentId).emit("userLeft", room.users.length);
        io.to(documentId).emit("cursorUpdate", room.cursors);
      }
    }

    socket.leave(documentId);
  });

  socket.on("documentEdit", (data) => {
    const { documentId, content, cursorPosition } = data;
    const room = documentRooms[documentId];

    if (room) {
      room.cursors[socket.id] = cursorPosition;
      io.to(documentId).emit("documentEdit", { content, cursorPosition });
      io.to(documentId).emit("cursorUpdate", room.cursors);
    }
  });

  socket.on("disconnect", () => {
    for (const documentId in documentRooms) {
      const room = documentRooms[documentId];

      room.users = room.users.filter((user) => user !== socket.id);

      delete room.cursors[socket.id];

      if (room.users.length === 0) {
        delete documentRooms[documentId];
      } else {
        documentRooms[documentId] = room;
        io.to(documentId).emit("userLeft", room.users.length);
        io.to(documentId).emit("cursorUpdate", room.cursors);
      }
    }
  });
});

module.exports = server;
